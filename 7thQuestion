81.Longest Subarray with sum K?

int longestSubarrayWithSumK(vector<int> a, long long k) {
    int len = 0;
    for(int i = 0 ; i<a.size() ; i++){
        int sum = 0;
        for(int j = i ; j<a.size() ; j++){
            sum += a[j];
            if(sum == k){
                len = max(len , (j - i)+1);
            }
        }
    }
    return len;
}

 OR

#include <bits/stdc++.h>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    map<long long , int> mpp;
    int sum = 0;
    int maxlen = 0;
    for(int i = 0 ; i<a.size() ; i++){
        sum+=a[i];
        if(sum == k){
            maxlen = i+1; 
        }
        long long  rem = sum - k;
        if(mpp.find(rem) != mpp.end()){
            int len = i - mpp[rem];
            maxlen = max(maxlen , len);
        }
        if(mpp.find(rem) == mpp.end()){
            mpp[sum] = i;
        }
    }
    return maxlen;
}
  OR

//optimal for positives and zeros

2pointer approach 

int longestSubarrayWithSumK(vector<int> nums, long long k) {
    int right = 0;
    int left = 0;
    int maxlen = 0;
    long long  sum = nums[0];
    int n = nums.size();
    while(right < n){
        while(left <= right && sum > k){
            sum = su m - nums[left];
            left++;
        }
        if(sum == k){
            maxlen = max(maxlen , right - left + 1);
        }
        right++;
        if(right < n){
            sum+=nums[right];
        }
    }
    return maxlen;
}
