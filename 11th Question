//three sum?

//bruteforce solution

#include <bits/stdc++.h>
//In this we have to create the set with inside list.
vector<vector<int>> triplet(int n, vector<int> &arr)
{
    set<vector<int>> st;
    for(int i = 0 ; i<n ; i++){
        for(int j = i+1 ; j<n ; j++){
            for(int k = j+1 ; k<n ; k++){
                if(arr[i] + arr[j] + arr[k] == 0){
                    vector<int> temp = {arr[i] , arr[j] , arr[k]};
                    sort(temp.begin() , temp.end());
                    st.insert(temp);
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin() , st.end());
    return ans;
}

TC:-O(n^3*log(n))

//Better solution

//Better solution we can do by using hashing.and we cannot use third loop to find kth element.

//to find k:- arr[i] + arr[j] + arr[k] = 0;

              arr[k] = -(arr[i] + arr[j]);


#include <bits/stdc++.h>
vector<vector<int>> triplet(int n, vector<int> &arr)
{
   set<vector<int>> st;
    for(int i = 0 ; i<n ; i++){
        set<int> hashset;
        for(int j = i+1 ; j<n ; j++){
            int third = -(arr[i] + arr[j]);
            if(hashset.find(third) != hashset.end()){
                vector<int> temp = {arr[i] , arr[j] , third};
                sort(temp.begin() , temp.end());
                st.insert(temp);
            }
            hashset.insert(arr[j]);
        }
    }
    vector<vector<int>> ans(st.begin() , st.end());
    return ans;
}
TC:-O(n^2*log(n))

//Optimal solution

//first i will sort the entire array.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin() , nums.end());
        for(int i = 0 ; i<nums.size() ; i++){
            if(i>0 && nums[i] == nums[i-1])continue;
            int j = i + 1;
            int k = nums.size() - 1;
            while(j<k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum<0){
                    j++;
                }
                else if(sum>0){
                    k--;
                }
                else{
                    vector<int> temp = {nums[i] , nums[j] , nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j < k && nums[j] == nums[j-1])j++;
                    while(j < k && nums[k] == nums[k+1])k--;
                }
            }
        }
        return ans;
    }
};
